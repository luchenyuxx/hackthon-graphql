# HTTP Server Configuration
server = {
  # The ip/host to listen to.
  host = "0.0.0.0"

  # The port to listen on.
  port = 8000

  # The path prefix after which the services are exposed.
  path = "/"
}

# SQL Database Configuration.
database = {
  # The type of database to use. Accepted values are either "h2" or "postgresql"
  type = postgresql

  # The JDBC Driver to use.
  driver = "org.postgresql.Driver"

  # The JDBC URL.
  url = "jdbc:postgresql://localhost:5432/dsense"

  # Username to connect to the database.
  user = "sa"

  # Password to connect to the database.
  password = ""

  # Location of the migration files, relative the the classpath
  schema = "db"

  # Clean the database on startup. /!\ NEVER USE IN PRODUCTION /!\
  clean = true
}

# Client configuration for payload routing
client = {
  # Proxy URI with port e.g http://proxy.host.com:8000
  proxy = ${?HTTP_PROXY}

  # Set the cookie `bypass-cf-fw` to bypass cloudflare
  cloudflare = ${?CLOUDFLARE_FW_COOKIE}
}

# Configuration useful for blockchain interactions
crypto = {
  # Smart contract address to which data will be sent
  smart-contract-address = "0x8EBC30a30C04A059810d74866c0732Adb6195B78"

  # Smart contract method to send data to smart contract
  smart-contract-method = "setData"

  # ChainID of the blockchain we are interacting with
  chain-id = 401697

  # Gas Limit (for the moment it's hardcoded because dependent of smart contract we interact with)
  gas-limit = 200000

  # Http provider address
  provider-address = "https://rpc.slock.it/tobalaba"
}
