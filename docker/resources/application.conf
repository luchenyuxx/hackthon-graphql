# HTTP Server Configuration
server = {
  # The ip/host to listen to.
  host = "0.0.0.0"
  host = ${?DSENSE_GATEWAY_SERVER_HOST}

  # The port to listen on.
  port = 8000
  port = ${?DSENSE_GATEWAY_SERVER_PORT}

  # The path prefix after which the services are exposed.
  path = "/"
  path = ${?DSENSE_GATEWAY_SERVER_PATH}
}

# SQL Database Configuration.
database = {
  # The type of database to use. Accepted values are either "h2" or "postgresql"
  type = ${?DSENSE_GATEWAY_DATABASE_TYPE}

  # The JDBC Driver to use.
  driver = ${?DSENSE_GATEWAY_DATABASE_DRIVER}

  # The JDBC URL.
  url = ${?DSENSE_GATEWAY_DATABASE_URL}

  # Username to connect to the database.
  user = ${?DSENSE_GATEWAY_DATABASE_USER}

  # Password to connect to the database.
  password = ${?DSENSE_GATEWAY_DATABASE_PASSWORD}

  # Location of the migration files, relative the the classpath
  schema = "db"
  schema = ${?DSENSE_GATEWAY_DATABASE_SCHEMA}

  # Clean the database on startup. /!\ NEVER USE IN PRODUCTION /!\
  clean = false
}


# Client configuration for payload routing
client = {
  # Proxy URI with port e.g http://proxy.host.com:8000
  proxy = ${?HTTP_PROXY}

  # Set the cookie `bypass-cf-fw` to bypass cloudflare
  cloudflare = ${?DSENSE_GATEWAY_CLOUDFLARE_FW_COOKIE}
}

# Configuration useful for blockchain interactions
crypto = {
  # Smart contract address to which data will be sent
  smart-contract-address = ${DSENSE_GATEWAY_SMART_CONTRACT_ADDRESS}

  # Smart contract method to send data to smart contract
  smart-contract-method = ${DSENSE_GATEWAY_SMART_CONTRACT_METHOD}

  # ChainID of the blockchain we are interacting with
  chain-id = ${DSENSE_GATEWAY_CHAIN_ID}

  # Gas Limit (for the moment it's hardcoded because dependent of smart contract we interact with)
  gas-limit = ${DSENSE_GATEWAY_GAS_LIMIT}

  # Http provider address
  provider-address = ${DSENSE_GATEWAY_PROVIDER_ADDRESS}
}
